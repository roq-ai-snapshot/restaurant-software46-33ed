generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model feedback {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id   String     @db.Uuid
  restaurant_id String     @db.Uuid
  rating        Int
  review        String?    @db.VarChar
  created_at    DateTime   @db.Timestamp(6)
  user          user       @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  restaurant    restaurant @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model menu {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  restaurant_id String      @db.Uuid
  restaurant    restaurant  @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  menu_item     menu_item[]
}

model menu_item {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  menu_id     String       @db.Uuid
  name        String       @db.VarChar
  description String?      @db.VarChar
  price       Int
  image_url   String?      @db.VarChar
  menu        menu         @relation(fields: [menu_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order_item  order_item[]
}

model order {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id   String       @db.Uuid
  restaurant_id String       @db.Uuid
  status        String       @db.VarChar
  total_price   Int
  created_at    DateTime     @db.Timestamp(6)
  user          user         @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  restaurant    restaurant   @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order_item    order_item[]
}

model order_item {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_id     String    @db.Uuid
  menu_item_id String    @db.Uuid
  quantity     Int
  menu_item    menu_item @relation(fields: [menu_item_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order        order     @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model reservation {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id   String     @db.Uuid
  restaurant_id String     @db.Uuid
  date          DateTime   @db.Date
  time          DateTime   @db.Time(6)
  party_size    Int
  status        String     @db.VarChar
  user          user       @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  restaurant    restaurant @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model restaurant {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String        @db.VarChar
  owner_id    String        @db.Uuid
  feedback    feedback[]
  menu        menu[]
  order       order[]
  reservation reservation[]
  user        user          @relation(fields: [owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  roq_user_id String        @db.VarChar
  tenant_id   String        @db.VarChar
  feedback    feedback[]
  order       order[]
  reservation reservation[]
  restaurant  restaurant[]
}
